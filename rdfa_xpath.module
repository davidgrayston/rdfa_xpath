<?php
/**
 * Implements hook_process_html().
 */
function rdfa_xpath_process_html(&$variables) {
  $rdfa_mappings = module_invoke_all('rdfa_xpath_mappings');
  if (!empty($rdfa_mappings)) {
    // Create DOM XPath object to process.
    $dom = filter_dom_load($variables['page']);
    $dom_xpath = new DOMXPath($dom);

    foreach ($rdfa_mappings as $rdfa_mapping) {
      switch ($rdfa_mapping['type']) {
        case 'global':
          // Process global mappings.
          _rdfa_xpath_process_rdf_mappings($dom_xpath, $rdfa_mapping['mappings']);
          break;
        case 'node':
          $node = menu_get_object();
          if (isset($node->type) && $node->type == $rdfa_mapping['bundle']) {
            // Pass node context for token replacement.
            _rdfa_xpath_process_rdf_mappings($dom_xpath, $rdfa_mapping['mappings'], array('node' => $node));
          }
          break;
      }
    }

    // Replace the page HTML with processed RDFa.
    $variables['page'] = filter_dom_serialize($dom);
  }
}

/**
 * Process RDFa mappings.
 */
function _rdfa_xpath_process_rdf_mappings($dom_xpath, $mappings, $context = array()) {
  foreach ($mappings as $mapping) {
    if ($elements = $dom_xpath->query($mapping['xpath'])) {
      foreach ($elements as $element) {
        foreach ($mapping['attributes'] as $key => $config) {
          $value = '';

          if (!empty($config['value'])) {
            // Use 'value' property if the configuration is an array.
            $value = $config['value'];
          }
          elseif (is_scalar($config)) {
            // If the config is a string, use as value.
            $value = $config;
          }

          // Replace any tokens.
          $value = token_replace($value, $context);

          // Run through callback if set.
          if (!empty($config['callback'])) {
            $value = call_user_func($config['callback'], $value);
          }

          // Add attribute to dom element.
          $element->setAttribute($key, token_replace($value, $context));
        }
      }
    }
  }
}
