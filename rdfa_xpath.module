<?php
/**
 * Implements hook_process_html().
 */
function rdfa_xpath_process_html(&$variables) {
  $rdfa_mappings = module_invoke_all('rdfa_xpath_mappings');
  if (!empty($rdfa_mappings)) {
    // Create DOM XPath object to process.
    $dom = filter_dom_load($variables['page']);
    $dom_xpath = new DOMXPath($dom);

    foreach ($rdfa_mappings as $rdfa_mapping) {
      switch ($rdfa_mapping['type']) {
        case 'global':
          // Process global mappings.
          _rdfa_xpath_process_rdf_mappings($dom_xpath, $rdfa_mapping['mappings']);
          break;
        case 'node':
          $node = menu_get_object();
          if (isset($node->type) && $node->type == $rdfa_mapping['bundle']) {
            // Pass node context for token replacement.
            _rdfa_xpath_process_rdf_mappings($dom_xpath, $rdfa_mapping['mappings'], array('node' => $node));
          }
          break;
      }
    }

    // Replace the page HTML with processed RDFa.
    $variables['page'] = filter_dom_serialize($dom);
  }
}

/**
 * Process RDFa mappings.
 *
 * @param DOMXPath $dom_xpath
 *   DOMXPath to be processed.
 * @param array $mappings
 *   rdfa xpath mappings to be processed.
 * @param array $context
 *   context to be used for token replacement.
 */
function _rdfa_xpath_process_rdf_mappings($dom_xpath, $mappings, $context = array()) {
  foreach ($mappings as $mapping) {
    if ($elements = $dom_xpath->query($mapping['xpath'])) {
      foreach ($elements as $element) {
        if (!empty($mapping['element'])) {
          // Inject new empty element if element name is specified.
          $rdfa_element = _rdfa_xpath_inject_element($element, $mapping);
        }
        else {
          // Add attributes to xpath element.
          $rdfa_element = $element;
        }

        foreach ($mapping['attributes'] as $key => $config) {
          $value = '';

          if (!empty($config['value'])) {
            // Use 'value' property if the configuration is an array.
            $value = $config['value'];
          }
          elseif (is_scalar($config)) {
            // If the config is a string, use as value.
            $value = $config;
          }

          // Replace any tokens.
          $value = token_replace($value, $context);

          // Run through callback if set.
          if (!empty($config['callback'])) {
            $value = call_user_func($config['callback'], $value);
          }

          // Add attribute to dom element.
          $rdfa_element->setAttribute($key, token_replace($value, $context));
        }
      }
    }
  }
}

/**
 * Create and inject a new dom element.
 *
 * @param $ref_element
 *   Element to inject before or after.
 * @param $mapping
 *   rdfa xpath mapping.
 * @return $element
 *   Newly created element.
 */
function _rdfa_xpath_inject_element($ref_element, $mapping) {
  $element = $ref_element->ownerDocument->createElement($mapping['element']);

  // Inject new element before or after xpath element based on position config.
  if (!empty($mapping['position']) && $mapping['position'] == 'after') {
    // Position after.
    if($ref_element->nextSibling) {
      $ref_element->parentNode->insertBefore($element, $ref_element->nextSibling);
    }
    else {
      $ref_element->parentNode->appendChild($element);
    }
  }
  else{
    // Position before.
    $ref_element->parentNode->insertBefore($element, $ref_element);
  }

  return $element;
}
